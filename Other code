# INSTALL AND LOAD PACKAGES
install.packages(c("sf", "ineq", "vegan", "dplyr", "tidyr", "tibble", "spatialreg", "spdep", "ggplot2", "patchwork"))
library(sf)
library(ineq)
library(vegan)
library(dplyr)
library(tidyr)
library(tibble)
library(spatialreg)
library(spdep)
library(ggplot2)
library(patchwork)

# LOAD AND CLEAN BIRD DATA
birddata <- read.delim("path/to/birddata.txt") %>%
  filter(CATEGORY %in% c("species", "issf")) %>%
  select(-c(1:6, 8:28, 31:50)) %>%
  mutate(
    OBSERVATION.COUNT = as.numeric(gsub("x", "1", OBSERVATION.COUNT)),
    OBSERVATION.COUNT = replace_na(OBSERVATION.COUNT, 1)
  ) %>%
  st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs = 4326)

# LOAD AND PREPARE CITY DATA
citydata <- st_read("path/to/citydata.shp") %>%
  st_make_valid()

# TRANSFORM TO UTM (adjust EPSG for your location)
citydata_utm <- st_transform(citydata, crs = 32618)
birddata_utm <- st_transform(birddata, crs = 32618)

# CREATE HEXAGONAL GRID
hex_grid <- st_make_grid(citydata_utm, cellsize = 500, square = FALSE) %>%
  st_as_sf() %>%
  mutate(ID = row_number()) %>%
  st_make_valid()

# INTERSECT DATA WITH HEXGRID
birddata_hex <- st_intersection(birddata_utm, hex_grid) %>%
  st_join(hex_grid, by = "ID")

# CLASSIFY SPECIES INTO COMMON/RARE (TOP 10% / MIDDLE 80%)
species_abundance <- birddata_hex %>%
  st_drop_geometry() %>%
  group_by(SCIENTIFIC.NAME) %>%
  summarise(total_obs = sum(OBSERVATION.COUNT)) %>%
  mutate(
    pct_rank = percent_rank(total_obs),
    group = case_when(
      pct_rank <= 0.10 ~ "common",
      pct_rank >= 0.90 ~ "error",
      TRUE ~ "rare"
    )
  )

common_species <- filter(species_abundance, group == "common")$SCIENTIFIC.NAME
rare_species <- filter(species_abundance, group == "rare")$SCIENTIFIC.NAME

# CALCULATE BIODIVERSITY INDICES FOR EACH GROUP
calculate_indices <- function(data, suffix) {
  if(nrow(data) == 0) return(data.frame(ID = character()))
  
  data %>%
    st_drop_geometry() %>%
    group_by(ID, SCIENTIFIC.NAME) %>%
    summarise(n = n(), .groups = "drop") %>%
    pivot_wider(names_from = SCIENTIFIC.NAME, values_from = n, values_fill = 0) %>%
    column_to_rownames("ID") %>%
    {
      data.frame(
        ID = rownames(.),
        richness = specnumber(.),
        shannon = diversity(.),
        simpson = diversity(., index = "simpson"),
        stringsAsFactors = FALSE
      )
    } %>%
    rename_with(~ paste0(., "_", suffix), -ID)
}

indices_common <- calculate_indices(
  filter(birddata_hex, SCIENTIFIC.NAME %in% common_species),
  "common"
)

indices_rare <- calculate_indices(
  filter(birddata_hex, SCIENTIFIC.NAME %in% rare_species),
  "rare"
)

# CALCULATE GINI INDEX BY HEXAGON
gini_hex <- citydata_utm %>%
  st_join(hex_grid) %>%
  st_drop_geometry() %>%
  group_by(ID) %>%
  summarise(
    gini = Gini(V_REF),
    mean_valor = mean(V_REF),
    sd_valor = sd(V_REF)
  )

# CREATE FINAL DATASET
final_data <- hex_grid %>%
  left_join(indices_common, by = "ID") %>%
  left_join(indices_rare, by = "ID") %>%
  left_join(gini_hex, by = "ID") %>%
  mutate(across(starts_with(c("richness", "shannon", "simpson")), ~ replace_na(., 0))) %>%
  filter(!is.na(gini)) %>%
  st_as_sf()

# SPATIAL REGRESSION FUNCTION
run_spatial_models <- function(data, response) {
  coords <- st_centroid(data) %>% st_coordinates()
  nb <- knn2nb(knearneigh(coords, k = 5))
  lw <- nb2listw(nb, style = "W")
  
  formula <- as.formula(paste(response, "~ gini + mean_valor"))
  
  list(
    sar = tryCatch(lagsarlm(formula, data, lw, method = "eigen"), error = function(e) NULL),
    sem = tryCatch(errorsarlm(formula, data, lw, method = "eigen"), error = function(e) NULL),
    sdm = tryCatch(lagsarlm(formula, data, lw, type = "mixed", method = "eigen"), error = function(e) NULL)
  )
}

# RUN MODELS FOR ALL METRICS AND GROUPS
metrics <- c("richness", "shannon", "simpson")
results <- list()

for(metric in metrics) {
  for(group in c("common", "rare")) {
    response <- paste0(metric, "_", group)
    
    if(response %in% names(final_data)) {
      filtered_data <- final_data %>% 
        filter(!is.na(get(response)))
      
      if(nrow(filtered_data) > 0) {
        results[[paste(group, metric)]] <- run_spatial_models(filtered_data, response)
      }
    }
  }
}

# EXTRACT AND FORMAT RESULTS
extract_results <- function(models) {
  map_dfr(names(models), function(model_type) {
    model <- models[[model_type]]
    if(is.null(model)) return(NULL)
    
    tidy(model) %>%
      mutate(
        model = model_type,
        aic = AIC(model),
        bic = BIC(model)
      )
  })
}

all_results <- map_dfr(results, extract_results, .id = "analysis")

# CREATE SUMMARY TABLES
coefficient_table <- all_results %>%
  select(analysis, model, term, estimate, std.error, p.value, aic, bic) %>%
  mutate(
    significance = case_when(
      p.value < 0.001 ~ "***",
      p.value < 0.01 ~ "**",
      p.value < 0.05 ~ "*",
      TRUE ~ ""
    ),
    analysis = factor(analysis, 
                      levels = c("common richness", "common shannon", "common simpson",
                                 "rare richness", "rare shannon", "rare simpson"))
  )

aic_table <- all_results %>%
  distinct(analysis, model, aic, bic) %>%
  pivot_wider(names_from = model, values_from = c(aic, bic))

# VISUALIZATION
plot_coefficients <- function(df, var) {
  df %>%
    filter(term == var) %>%
    ggplot(aes(x = analysis, y = estimate, color = model)) +
    geom_point(position = position_dodge(width = 0.5)) +
    geom_errorbar(
      aes(ymin = estimate - 1.96*std.error,
          ymax = estimate + 1.96*std.error),
      width = 0.2,
      position = position_dodge(width = 0.5)
    ) +
    geom_hline(yintercept = 0, linetype = "dashed") +
    labs(title = paste("Coefficients for", var),
         x = "Analysis Group", y = "Estimate") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
}

gini_plot <- plot_coefficients(coefficient_table, "gini")
valor_plot <- plot_coefficients(coefficient_table, "mean_valor")

# OUTPUT RESULTS
list(
  coefficients = coefficient_table,
  aic_comparison = aic_table,
  plots = list(gini = gini_plot, valor = valor_plot)
)
